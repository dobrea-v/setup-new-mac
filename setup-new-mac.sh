#!/bin/bash

VERSION="v0.0.1"
#===============================================================================
# title           setup-new-mac.sh
# author          jkesler@vendasta.com
#                 https://github.com/joelkesler
#===============================================================================
#   A shell script to help with the quick setup and installation of tools  and 
#   applications for new developers at Vendasta.
# 
#   Quick Instructions:
#
#   1. Make the script executable:
#      chmod +x ./setup-new-mac.sh
#
#   2. Run the script:
#      ./setup-new-mac.sh
#
#   3. Some installs will need your password
#
#   4. You will be promted to fill out your git email and name. 
#      Use the email and name you use for Github
#
#   5. Follow the Post Installation Instructions in the Readme:
README="https://github.com/vendasta/setup-new-computer-script#post-installation-instructions"
#  
#===============================================================================


# IDEs to make availabe. Please also adjust code to brew cask install
options[0]="Visual Studio Code";    devtoolchoices[0]="+"
options[1]="Jetbrains Toolbox";     devtoolchoices[6]=""
options[2]="Webstorm";              devtoolchoices[3]=""
options[3]="Sublime Text";          devtoolchoices[4]=""
options[4]="iTerm2";                devtoolchoices[5]=""


#===============================================================================
#  Functions
#===============================================================================


printHeading() {
    printf "\n\n\n\e[0;36m$1\e[0m \n"
}

printDivider() {
    printf %"$COLUMNS"s |tr " " "-"
    printf "\n"
}

printError() {
    printf "\n\e[1;31m"
    printf %"$COLUMNS"s |tr " " "-"
    if [ -z "$1" ]      # Is parameter #1 zero length?
    then
        printf "     There was an error ... somewhere\n"  # no parameter passed.
    else
        printf "\n     Error Installing $1\n" # parameter passed.
    fi
    printf %"$COLUMNS"s |tr " " "-"
    printf " \e[0m\n"
}

printStep() {
    printf %"$COLUMNS"s |tr " " "-"
    printf "\nInstalling $1...\n";
    $2 || printError "$1"
}

printLogo() {
cat << "EOT"
    Q U I C K   S E T U P   S C R I P T
    NOTE:
    You can exit the script at any time by
    pressing CONTROL+C a bunch
EOT
}

showIDEMenuLoop() {
    # from https://serverfault.com/a/777849
    printLogo
    printHeading "Select Optional IDEs and Tools"
    printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
        echo ""
        for NUM in "${!options[@]}"; do
            echo "[""${devtoolchoices[NUM]:- }""]" $(( NUM+1 ))") ${options[NUM]}"
        done
        echo ""
}

writetoBashProfile() {
cat << EOT >> ~/.bash_profile
# --------------------------------------------------------------------
# Begin Bash autogenerated content from setup-new-computer.sh   $VERSION
# --------------------------------------------------------------------
# Supress "Bash no longer supported" message
export BASH_SILENCE_DEPRECATION_WARNING=1
# Setting up Path for Homebrew
export PATH=/usr/local/sbin:\$PATH
# Bash Autocompletion
if type brew &>/dev/null; then
  HOMEBREW_PREFIX="\$(brew --prefix)"
  if [[ -r "\${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh" ]]; then
    source "\${HOMEBREW_PREFIX}/etc/profile.d/bash_completion.sh"
  else
    for COMPLETION in "\${HOMEBREW_PREFIX}/etc/bash_completion.d/"*; do
      [[ -r "\$COMPLETION" ]] && source "\$COMPLETION"
    done
  fi
fi
# NVM
# This needs to be after "Setting up Path for Homebrew" to override Homebrew Node
export NVM_DIR="\$HOME/.nvm"
[ -s "\$NVM_DIR/nvm.sh" ] && \
    source "\$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "\$NVM_DIR/bash_completion" ] && \
    source "\$NVM_DIR/bash_completion"  # This loads nvm bash_completion
# Node
# Increases the default memory limit for Node, so larger Angular projects can be built
export NODE_OPTIONS=--max_old_space_size=8192
# Update Node 16 and reinstall previous packages
node-upgrade() {
    prev_ver=\$(nvm current)
    nvm install 16
    nvm reinstall-packages "\$prev_ver"
    nvm uninstall "\$prev_ver"
    nvm cache clear
}
# --------------------------------------------------------------------
# End autogenerated content from setup-new-computer.sh   $VERSION
# --------------------------------------------------------------------
EOT
}

writetoZshProfile() {
cat << EOT >> ~/.zprofile
# --------------------------------------------------------------------
# Begin ZSH autogenerated content from setup-new-computer.sh   $VERSION
# --------------------------------------------------------------------
# Setting up Path for Homebrew
export PATH=/usr/local/sbin:\$PATH
# Brew Autocompletion
if type brew &>/dev/null; then
    fpath+=\$(brew --prefix)/share/zsh/site-functions
fi
# Zsh Autocompletion
# Note: must run after Brew Autocompletion
autoload -U +X compinit && compinit
autoload -U +X bashcompinit && bashcompinit
fpath=(/usr/local/share/zsh-completions \$fpath)
# NVM 
# This needs to be after "Setting up Path for Homebrew" to override Homebrew Node
export NVM_DIR="\$HOME/.nvm"
[ -s "\$NVM_DIR/nvm.sh" ] && \
    source "\$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "\$NVM_DIR/bash_completion" ] && \
    source "\$NVM_DIR/bash_completion"  # This loads nvm bash_completion
# Node
# Increases the default memory limit for Node, so larger Anglar prjects can be built
export NODE_OPTIONS=--max_old_space_size=8192
# Update Node 16 and reinstall previous packages
node-upgrade() {
    prev_ver=\$(nvm current)
    nvm install 16
    nvm reinstall-packages "\$prev_ver"
    nvm uninstall "\$prev_ver"
    nvm cache clear
}
# --------------------------------------------------------------------
# End autogenerated content from setup-new-computer.sh   $VERSION
# --------------------------------------------------------------------
EOT
}


writetoHuskrc() {
cat << EOT >> ~/.huskyrc
# --------------------------------------------------------------------
# Begin Husky autogenerated content from setup-new-computer.sh   $VERSION
# --------------------------------------------------------------------
# This loads nvm.sh and sets the correct PATH before running hook
export NVM_DIR="\$HOME/.nvm"
[ -s "\$NVM_DIR/nvm.sh" ] && \
    source "\$NVM_DIR/nvm.sh"
   
# --------------------------------------------------------------------
# End autogenerated content from setup-new-computer.sh   $VERSION
# --------------------------------------------------------------------
EOT
}


# Get root user for later. Brew needs the user to be admin to install 
sudo ls > /dev/null


#===============================================================================
# Installer: Settings
#===============================================================================


# Show IDE Selection Menu
clear
while 
    showIDEMenuLoop && \
    read -r -e -p "Enable or Disable by typing number. Hit ENTER to continue " \
    -n1 SELECTION && [[ -n "$SELECTION" ]]; \
do
    clear
    if [[ "$SELECTION" == *[[:digit:]]* && $SELECTION -ge 1 && $SELECTION -le ${#options[@]} ]]; then
        (( SELECTION-- ))
        if [[ "${devtoolchoices[SELECTION]}" == "+" ]]; then
            devtoolchoices[SELECTION]=""
        else
            devtoolchoices[SELECTION]="+"
        fi
            ERROR=" "
    else
        ERROR="Invalid option: $SELECTION"
    fi
done
printDivider



#===============================================================================
#  Installer: Set up shell profiles
#===============================================================================


# Create .bash_profile and .zprofile if they dont exist
printHeading "Prep Bash and Zsh"
printDivider
    echo "✔ Touch ~/.bash_profile"
        touch ~/.bash_profile
printDivider
    echo "✔ Touch ~/.zprofile"
        touch ~/.zprofile
printDivider
    if grep --quiet "setup-new-computer.sh" ~/.bash_profile; then
        echo "✔ .bash_profile already modified. Skipping"
    else
        writetoBashProfile
        echo "✔ Added to .bash_profile"
    fi
printDivider
    # Zsh profile
    if grep --quiet "setup-new-computer.sh" ~/.zprofile; then
        echo "✔ .zprofile already modified. Skipping"
    else
        writetoZshProfile
        echo "✔ Added to .zprofile"
    fi
printDivider
    echo "(zsh) Rebuild zcompdump"
    rm -f ~/.zcompdump
printDivider
    echo "(zsh) Fix insecure directories warning"
    chmod go-w "$(brew --prefix)/share"
printDivider


#===============================================================================
#  Installer: Main Payload
#===============================================================================


# Install xcode cli development tools
printHeading "Installing xcode cli development tools"
printDivider
    xcode-select --install && \
        read -n 1 -r -s -p $'\n\nWhen Xcode cli tools are installed, press ANY KEY to continue...\n\n' || \
            printDivider && echo "✔ Xcode cli tools already installed. Skipping"
printDivider


# Install Brew
printHeading "Installing Homebrew"
printDivider
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
printDivider
    echo "✔ Setting Path to /usr/local/bin:\$PATH"
        export PATH=/usr/local/bin:$PATH
printDivider


# Install Utilities
printHeading "Installing Brew Packages"
    printStep "Bash"                        "brew install bash"
    printStep "bash-completion"             "brew install bash-completion"
    printStep "zsh-completions"             "brew install zsh-completions"
    printStep "Git"                         "brew install git"
    printStep "Ruby"                        "brew install ruby"
printDivider


# Install  Apps
printHeading "Installing Applications"
    printStep "Slack"                       "brew install --cask slack"
    printStep "Firefox"                     "brew install --cask firefox"
    printStep "Google Chrome"               "brew install --cask google-chrome"
    printStep "Postman"                     "brew install --cask postman"
    # Install Visual Studio Code
    if [[ "${devtoolchoices[0]}" == "+" ]]; then
        printStep "Visual Studio Code"      "brew install --cask visual-studio-code"
    fi
    # Install Jetbrains Toolbox
    if [[ "${devtoolchoices[1]}" == "+" ]]; then
        printStep "Jetbrains Toolbox"       "brew install --cask jetbrains-toolbox"
    fi
    # Install WebStorm
    if [[ "${devtoolchoices[4]}" == "+" ]]; then
        printStep "WebStorm"                "brew install --cask webstorm"
    fi
    # Install Sublime Text
    if [[ "${devtoolchoices[5]}" == "+" ]]; then
        printStep "Sublime Text"            "brew install --cask sublime-text"
    fi
    # Install iTerm2
    if [[ "${devtoolchoices[6]}" == "+" ]]; then
        printStep "iTerm2"                  "brew install --cask iterm2"
    fi
printDivider


# Install Node
printHeading "Installing Node and Angular CLI through NVM"
    printDivider
        getLastestNVM() {
            # From https://gist.github.com/lukechilds/a83e1d7127b78fef38c2914c4ececc3c
            # Get latest release from GitHub api | Get tag line | Pluck JSON value
            curl --silent "https://api.github.com/repos/nvm-sh/nvm/releases/latest" | 
                grep '"tag_name":' |
                sed -E 's/.*"([^"]+)".*/\1/'
        }
        echo "✔ Current NVM is $(getLastestNVM)"
    printDivider
        echo "Installing NVM (Node Version Manager) $(getLastestNVM)..."
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/$(getLastestNVM)/install.sh | bash
    printDivider
        echo "✔ Loading NVM into PATH"
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    printDivider
        echo "Installing Node..."
        nvm install 16
    printStep "NX"                      "npm install -g nx"
    printStep "Husky"                   "npm install -g husky"
    printStep "Node Gyp"                "npm install -g node-gyp"
    printDivider
        echo "✔ Touch ~/.huskyrc"
            touch ~/.huskyrc
    printDivider
        # Husky profile
        if grep --quiet "nvm" ~/.huskyrc; then
            echo "✔ .huskyrc already includes nvm. Skipping"
        else
            writetoHuskrc
            echo "✔ Add nvm to .huskyrc"
        fi
printDivider


# Install System Tweaks
printHeading "System Tweaks"
    printDivider
    echo "✔ General: Disable the sound effects on boot"
        sudo nvram SystemAudioVolume=" "
    echo "✔ Disable the “Are you sure you want to open this application?” dialog"        
        defaults write com.apple.LaunchServices LSQuarantine -bool false
    echo "✔ Remove duplicates in the “Open With” menu (also see `lscleanup` alias)"
           /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user
    echo "✔ Disable the crash reporter"
           defaults write com.apple.CrashReporter DialogType -string "none"
    echo "✔ General: Expand save and print panel by default"
        defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true
        defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true
        defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true
        defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true
    echo "✔ General: Save to disk (not to iCloud) by default"
        defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false
    echo "✔ General: Avoid creating .DS_Store files on network volumes"
        defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
    printDivider
    
    echo "✔ General: Expand save and print panel by default"
        defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false
        defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
    
    echo "✔ Trackpad"
        defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
        defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
        defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
    
    echo "✔ Screen"
        defaults write com.apple.screensaver askForPassword -int 1
        defaults write com.apple.screensaver askForPasswordDelay -int 0
        defaults write com.apple.screencapture location -string "${HOME}/Desktop/Screenshots"
        defaults write com.apple.screencapture type -string "png"
       
    echo "✔ Typing: Disable smart quotes and dashes as they cause problems when typing code"
        defaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false
        defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false
    echo "✔ Typing: Disable press-and-hold for keys in favor of key repeat"
        defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false
    printDivider

    echo "✔ Finder: Show status bar and path bar"
        defaults write com.apple.finder ShowStatusBar -bool true
        defaults write com.apple.finder ShowPathbar -bool true
    echo "✔ Finder: Disable the warning when changing a file extension"
        defaults write com.apple.finder FXEnableExtensionChangeWarning 
-bool false
    echo "✔ Finder: Show the ~/Library folder"
        chflags nohidden ~/Library
    echo "✔ Finder"
        defaults write com.apple.finder QuitMenuItem -bool true
        defaults write NSGlobalDomain AppleShowAllExtensions -bool true
        defaults write com.apple.finder _FXSortFoldersFirst -bool true
        defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"
        defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
        defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
        defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true
        defaults write com.apple.finder WarnOnEmptyTrash -bool false
        chflags nohidden ~/Library
        sudo chflags nohidden /Volumes
        defaults write com.apple.finder FXInfoPanesExpanded -dict \
          General -bool true \
          OpenWith -bool true \
          Privileges -bool true
    echo "✔ Dock"
        defaults write com.apple.dock static-only -bool true
        defaults write com.apple.dock launchanim -bool false
        defaults write com.apple.dock expose-animation-duration -float 0.1


    printDivider
        
    echo "✔ Safari: Enable Safari’s Developer Settings"
        defaults write com.apple.Safari IncludeInternalDebugMenu -bool true
        defaults write com.apple.Safari IncludeDevelopMenu -bool true
        defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
        defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true
        defaults write NSGlobalDomain WebKitDeveloperExtras -bool true
        defaults write com.apple.Safari UniversalSearchEnabled -bool false
        defaults write com.apple.Safari SuppressSearchSuggestions -bool true
        defaults write com.apple.Safari SendDoNotTrackHTTPHeader -bool true

    printDivider
    
    echo "✔ Chrome: Disable the all too sensitive backswipe on Trackpads and Magic Mice"
        defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false
        defaults write com.google.Chrome.canary AppleEnableSwipeNavigateWithScrolls -bool false
        defaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool false
        defaults write com.google.Chrome.canary AppleEnableMouseSwipeNavigateWithScrolls -bool false
    echo "✔ Chrome: Use the system print dialog and expand dialog by default"
        defaults write com.google.Chrome DisablePrintPreview -bool true
        defaults write com.google.Chrome.canary DisablePrintPreview -bool true
        defaults write com.google.Chrome PMPrintingExpandedStateForPrint2 -bool true
        defaults write com.google.Chrome.canary PMPrintingExpandedStateForPrint2 -bool true
        defaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool TRUE

    echo "✔ Spotlight"
        defaults write com.apple.spotlight orderedItems -array \
          '{"enabled" = 1;"name" = "APPLICATIONS";}' \
          '{"enabled" = 1;"name" = "SYSTEM_PREFS";}' \
          '{"enabled" = 1;"name" = "DIRECTORIES";}' \
          '{"enabled" = 1;"name" = "PDF";}' \
          '{"enabled" = 1;"name" = "FONTS";}' \
          '{"enabled" = 0;"name" = "DOCUMENTS";}' \
          '{"enabled" = 0;"name" = "MESSAGES";}' \
          '{"enabled" = 0;"name" = "CONTACT";}' \
          '{"enabled" = 0;"name" = "EVENT_TODO";}' \
          '{"enabled" = 0;"name" = "IMAGES";}' \
          '{"enabled" = 0;"name" = "BOOKMARKS";}' \
          '{"enabled" = 0;"name" = "MUSIC";}' \
          '{"enabled" = 0;"name" = "MOVIES";}' \
          '{"enabled" = 0;"name" = "PRESENTATIONS";}' \
          '{"enabled" = 0;"name" = "SPREADSHEETS";}' \
          '{"enabled" = 0;"name" = "SOURCE";}' \
          '{"enabled" = 0;"name" = "MENU_DEFINITION";}' \
          '{"enabled" = 0;"name" = "MENU_OTHER";}' \
          '{"enabled" = 0;"name" = "MENU_CONVERSION";}' \
          '{"enabled" = 0;"name" = "MENU_EXPRESSION";}' \
          '{"enabled" = 0;"name" = "MENU_WEBSEARCH";}' \
          '{"enabled" = 0;"name" = "MENU_SPOTLIGHT_SUGGESTIONS";}'
        # Load new settings before rebuilding the index
        killall mds > /dev/null 2>&1
        # Make sure indexing is enabled for the main volume
        sudo mdutil -i on / > /dev/null
        # Rebuild the index from scratch
        sudo mdutil -E / > /dev/null
        
   echo "✔ Activity Monitor"
        # Show the main window when launching Activity Monitor
        defaults write com.apple.ActivityMonitor OpenMainWindow -bool true

        # Visualize CPU usage in the Activity Monitor Dock icon
        # defaults write com.apple.ActivityMonitor IconType -int 5

        # Show all processes in Activity Monitor
        defaults write com.apple.ActivityMonitor ShowCategory -int 0

        # Sort Activity Monitor results by CPU usage
        defaults write com.apple.ActivityMonitor SortColumn -string "CPUUsage"
        defaults write com.apple.ActivityMonitor SortDirection -int 0
        
printDivider



#===============================================================================
#  Installer: Git
#===============================================================================


# Set up Git
printHeading "Set Up Git"

# Configure git to always ssh when dealing with https github repos
git config --global url."git@github.com:".insteadOf https://github.com/

printDivider
    echo "✔ Set Git to store credentials in Keychain"
    git config --global credential.helper osxkeychain
printDivider
    if [ -n "$(git config --global user.email)" ]; then
        echo "✔ Git email is set to $(git config --global user.email)"
    else
        read -p 'What is your Git email address?: ' gitEmail
        git config --global user.email "$gitEmail"
    fi
printDivider
    if [ -n "$(git config --global user.name)" ]; then
        echo "✔ Git display name is set to $(git config --global user.name)"
    else
        read -p 'What is your Git display name (Firstname Lastname)?: ' gitName
        git config --global user.name "$gitName"
    fi
printDivider



#===============================================================================
#  Installer: Complete
#===============================================================================

printHeading "Script Complete"
printDivider

tput setaf 2 # set text color to green
cat << "EOT"
   
╭─────────────────────────────────────────────────────────────────╮
│░░░░░░░░░░░░░░░░░░░░░░░░░░░ Next Steps ░░░░░░░░░░░░░░░░░░░░░░░░░░│   
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│   There are still a few steps you need to do to finish setup.   │
│                                                                 │
│        The link below has Post Installation Instructions        │
│                                                                 │   
└─────────────────────────────────────────────────────────────────┘
EOT
tput sgr0 # reset text
echo "Link:"
echo $README
echo ""
echo ""
tput bold # bold text
read -n 1 -r -s -p $'             Press any key to to open the link in a browser...\n\n'
open $README
tput sgr0 # reset text

echo ""
echo ""
echo "Please open a new terminal window to continue your setup steps"


exit
